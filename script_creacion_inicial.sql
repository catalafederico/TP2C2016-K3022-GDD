 /*CREO NUEVO ESQUEMA */
CREATE SCHEMA [3FG] AUTHORIZATION [gd];
GO
/*CREO LAS TABLAS DEL DER*/

/*CREO LA TABLA DE USUARIOS */

CREATE TABLE [3FG].USUARIOS(
	ID_USUARIO BIGINT PRIMARY KEY IDENTITY(1,1),
	USUARIO_NOMBRE VARCHAR(250),
	CONTRASEÑA VARCHAR(250),
	CANT_INTENTOS TINYINT DEFAULT 0,
	NOMBRE VARCHAR(100),
	APELLIDO VARCHAR(100),
	TIPO_DE_DOCUMENTO VARCHAR(100) DEFAULT 'D.N.I',
	NUMERO_DOCUMENTO BIGINT,
	TELEFONO BIGINT,
	DIRECCION VARCHAR(100),
	MAIL VARCHAR(100),
	FECHA_NACIMIENTO DATETIME,
	SEXO VARCHAR(20),
	HABILITADO TINYINT DEFAULT 1
);
GO
/*CREO LA TABLA DE ROLES */
CREATE TABLE [3FG].ROLES (
	ID_ROL BIGINT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE_ROL VARCHAR(100) UNIQUE,
	HABILITADO TINYINT DEFAULT 1
);
GO
/*CREO LA TABLA DE ROLES POR USUARIO*/
CREATE TABLE [3FG].ROLES_USUARIO (
	ID_USUARIO BIGINT NOT NULL,
	ID_ROL BIGINT NOT NULL,
);
GO
/*CREO LA TABLA DE FUNCIONALIDADES*/
CREATE TABLE [3FG].FUNCIONALIDADES (
	ID_FUNCIONALIDAD BIGINT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE VARCHAR(100) UNIQUE,
);
GO
/*CREO LA TABLA DE FUNCIONALIDADES POR ROL*/
CREATE TABLE [3FG].FUNCIONALIDADES_ROL (
	ID_ROL BIGINT NOT NULL,
	ID_FUNCIONALIDAD BIGINT NOT NULL,
);
GO
/*CREO LA TABLA DE AFILIADOS */
CREATE TABLE [3FG].AFILIADOS (
	ID_USUARIO BIGINT PRIMARY KEY,
	ID_PLAN BIGINT,
	ESTADO_CIVIL VARCHAR(20),
	CANT_FAMILIARES BIGINT,
	RAIZ_AFILIADO BIGINT,
	NUMERO_FAMILIA BIGINT
);
GO
/*CREO LA TABLA DE PROFESIONALES */
CREATE TABLE [3FG].PROFESIONALES (
	ID_USUARIO BIGINT PRIMARY KEY,
	MATRICULA BIGINT,
	INICIO_DISPONIBILIDAD DATETIME,
	FIN_DISPONIBILIDAD DATETIME
);
GO
/*CREO LA TABLA DE HISTORIAL_CAMBIOS_PLAN*/
CREATE TABLE [3FG].HISTORIAL_CAMBIOS_PLAN (
	ID_CAMBIO BIGINT IDENTITY(1,1) PRIMARY KEY,
	ID_USUARIO BIGINT,
	MOTIVO_CAMBIO_PLAN VARCHAR(250),
	FECHA_MODIFICACION DATETIME
);
GO
/*CREO LA TABLA DE ESPECIALIDADES*/
CREATE TABLE [3FG].ESPECIALIDADES (
	ID_ESPECIALIDAD BIGINT PRIMARY KEY,
	ID_TIPO_ESPECIALIDAD BIGINT,
	DESCRIPCION_ESPECIALIDAD VARCHAR(250)
);
GO
/*CREO LA TABLA DE ESPECIALIDAD_PROFESIONAL*/
CREATE TABLE [3FG].ESPECIALIDAD_PROFESIONAL (
	ID_USUARIO BIGINT NOT NULL,
	ID_ESPECIALIDAD BIGINT NOT NULL
);
GO
/*CREO LA TABLA DE AGENDA*/
CREATE TABLE [3FG].AGENDA (
	ID_AGENDA BIGINT IDENTITY(1,1) PRIMARY KEY,
	ID_USUARIO BIGINT,
	ID_ESPECIALIDAD BIGINT,
	DIA_ATENCION VARCHAR(20),
	INICIO_ATENCION VARCHAR(8),
	FIN_ATENCION VARCHAR(8)
);
GO
--DROP TABLE [3FG].AGENDA 
/*CREO LA TABLA DE TIPO_ESPECIALIDAD */
CREATE TABLE [3FG].TIPO_ESPECIALIDAD (
	ID_TIPO_ESPECIALIDAD BIGINT PRIMARY KEY,
	DESCRIPCION_TIPO_ESPECIALIDAD VARCHAR(250)
);
GO
/*CREO LA TABLA DE PLANES*/
CREATE TABLE [3FG].PLANES (
	ID_PLAN BIGINT IDENTITY(555555,1) PRIMARY KEY,
	DESCRIPCION_PLAN VARCHAR(250),
	PRECIO_BONO_CONSULTA BIGINT,
	PRECIO_BONO_FARMACIA BIGINT
);
GO

/*CREO LA TABLA DE LOS BONOS*/
CREATE TABLE [3FG].BONOS (
	ID_BONO BIGINT IDENTITY(46494,1) PRIMARY KEY,
	ID_PLAN BIGINT,
	ID_USUARIO BIGINT,
	NUMERO_CONSULTA BIGINT
);
GO
/*CREO LA TABLA DE COMPRAS*/
CREATE TABLE [3FG].COMPRAS (
	ID_COMPRA BIGINT IDENTITY(1,1) PRIMARY KEY,
	ID_USUARIO BIGINT,
	FECHA_COMPRA DATETIME,
	CANTIDAD_BONOS BIGINT,
	MONTO_PAGADO BIGINT
);
GO 
/*CREO LA TABLA DE TURNOS*/
CREATE TABLE [3FG].TURNOS (
	ID_TURNO BIGINT IDENTITY(56565,1) PRIMARY KEY,
	ID_AFILIADO BIGINT,
	ID_AGENDA BIGINT,
	FECHA_TURNO DATETIME
);
GO
/*CREO LA TABLA DE RECEPCIONES*/
CREATE TABLE [3FG].RECEPCIONES (
	ID_RECEPCION BIGINT IDENTITY(1,1) PRIMARY KEY,
	ID_TURNO BIGINT,
	ID_BONO BIGINT,
	FECHA_RECEPCIONES DATETIME
);
GO
/*CREO LA TABLA DE ATENCIONES_MEDICAS*/
CREATE TABLE [3FG].ATENCIONES_MEDICAS (
	ID_ATENCION BIGINT IDENTITY(1,1) PRIMARY KEY,
	ID_RECEPCION BIGINT,
	FECHA_ATENCION DATETIME,
	DIAGNOSTICO VARCHAR(250),
	SINTOMAS VARCHAR(250)
);
GO
/*CREO LA TABLA DE CANCELACIONES*/
CREATE TABLE [3FG].CANCELACIONES (
	ID_CANCELACION BIGINT IDENTITY(1,1) PRIMARY KEY,
	ID_TURNO BIGINT,
	TIPO_CANCELACION VARCHAR(20),
	MOTIVO_CANCELACION VARCHAR(250)
);
GO

/* CREO LAS PRIMARY KEY COMPUESTAS  */
alter table [3FG].ROLES_USUARIO add constraint PK_ROL_POR_USUARIO
	primary key clustered (ID_ROL,ID_USUARIO);
GO
alter table [3FG].FUNCIONALIDADES_ROL add constraint PK_FUNCIONALIDAD_POR_ROL
	primary key clustered (ID_ROL,ID_FUNCIONALIDAD);
GO
alter table [3FG].ESPECIALIDAD_PROFESIONAL add constraint PK_ESPECECIALIDAD_POR_PROFESIONAL
	primary key clustered (ID_USUARIO,ID_ESPECIALIDAD);
GO

/*CREO LA FOREIGN KEY COMPUESTA*/ --NO SE SI ESTO ESTA BIEN--
alter table [3FG].AGENDA add constraint FK_AGENDA_ESPECIALIDAD_PROFESIONAL
	foreign key (ID_USUARIO,ID_ESPECIALIDAD) references [3FG].ESPECIALIDAD_PROFESIONAL (ID_USUARIO,ID_ESPECIALIDAD) ;
GO

/*CREO LAS FOREIGN KEY*/ 

alter table [3FG].FUNCIONALIDADES_ROL add constraint FK1_FUNC_ROL
	foreign key (ID_ROL) references [3FG].ROLES (ID_ROL);
GO
alter table [3FG].FUNCIONALIDADES_ROL add constraint FK2_FUNC_ROL
	foreign key (ID_FUNCIONALIDAD) references [3FG].FUNCIONALIDADES (ID_FUNCIONALIDAD);
GO	
alter table [3FG].ROLES_USUARIO add constraint FK1_ROL_USUARIO
	foreign key (ID_ROL) references [3FG].ROLES (ID_ROL);
GO	
alter table [3FG].ROLES_USUARIO add constraint FK2_ROL_USUARIO
	foreign key (ID_USUARIO) references [3FG].USUARIOS (ID_USUARIO);
GO
alter table [3FG].AFILIADOS add constraint FK_AFILIADO_USUARIO
	foreign key (ID_USUARIO) references [3FG].USUARIOS (ID_USUARIO);
GO
alter table [3FG].PROFESIONALES add constraint FK_PROFESIONAL_USUARIO
	foreign key (ID_USUARIO) references [3FG].USUARIOS (ID_USUARIO);
GO
alter table [3FG].AFILIADOS add constraint FK_AFILIADO_PLAN
	foreign key (ID_PLAN) references [3FG].PLANES (ID_PLAN);
GO
alter table [3FG].HISTORIAL_CAMBIOS_PLAN add constraint FK2_AFILIADO_CAMBIO_PLAN
	foreign key (ID_USUARIO) references [3FG].AFILIADOS (ID_USUARIO);
GO
alter table [3FG].ESPECIALIDAD_PROFESIONAL add constraint FK1_ESPECIALIDAD_POR_PROFESIONAL
	foreign key (ID_USUARIO) references [3FG].PROFESIONALES (ID_USUARIO);
GO
alter table [3FG].ESPECIALIDAD_PROFESIONAL add constraint FK2_ESPECIALIDAD_POR_PROFESIONAL
	foreign key (ID_ESPECIALIDAD) references [3FG].ESPECIALIDADES (ID_ESPECIALIDAD);
GO
alter table [3FG].ESPECIALIDADES add constraint FK_ESPECIALIDADES_TIPO_DE_ESPECIALIDAD
	foreign key (ID_TIPO_ESPECIALIDAD) references [3FG].TIPO_ESPECIALIDAD (ID_TIPO_ESPECIALIDAD);
GO
alter table [3FG].BONOS add constraint FK_BONO_AFILIADO
	foreign key (ID_USUARIO) references [3FG].AFILIADOS (ID_USUARIO);
GO
alter table [3FG].BONOS add constraint FK_BONO_PLAN
	foreign key (ID_PLAN) references [3FG].PLANES (ID_PLAN);
GO
alter table [3FG].COMPRAS add constraint FK_COMPRA_AFILIADO
	foreign key (ID_USUARIO) references [3FG].AFILIADOS (ID_USUARIO);
GO
alter table [3FG].TURNOS add constraint FK_TURNO_AFILIADO
	foreign key (ID_AFILIADO) references [3FG].AFILIADOS (ID_USUARIO);
GO
alter table [3FG].TURNOS add constraint FK_TURNO_AGENDA_PROFESIONAL
	foreign key (ID_AGENDA) references [3FG].AGENDA (ID_AGENDA);
GO
alter table [3FG].RECEPCIONES add constraint FK_RECEPCIONES_TURNO
	foreign key (ID_TURNO) references [3FG].TURNOS (ID_TURNO);
GO
alter table [3FG].RECEPCIONES add constraint FK_RECEPCIONES_BONO
	foreign key (ID_BONO) references [3FG].BONOS (ID_BONO);
GO
alter table [3FG].ATENCIONES_MEDICAS add constraint FK_ATENCIONES_MEDICAS_RECEPCION
	foreign key (ID_RECEPCION) references [3FG].RECEPCIONES (ID_RECEPCION);
GO
alter table [3FG].CANCELACIONES add constraint FK_CANCELACIONES_TURNO
	foreign key (ID_TURNO) references [3FG].TURNOS (ID_TURNO);
GO

/* Crear trigger que ante cada recepcion cree la consulta correspondiente */

CREATE TRIGGER [3FG].CargarAtencionDespuesDeLaRecepcionTrigger ON [3FG].RECEPCIONES
AFTER INSERT
AS
BEGIN
	INSERT INTO [3FG].ATENCIONES_MEDICAS(ID_RECEPCION,FECHA_ATENCION,DIAGNOSTICO,SINTOMAS)
	SELECT i.ID_RECEPCION,Bono_Consulta_Fecha_Impresion,Consulta_Enfermedades,Consulta_Sintomas
	FROM gd_esquema.Maestra m, inserted i
	WHERE m.Turno_Numero = i.ID_TURNO
	AND Compra_Bono_Fecha is NULL
	AND Bono_Consulta_Fecha_Impresion is NOT NULL
END;
GO

/*FUNCIONES RELACIONADAS CON LA FECHA UTILIZADAS PARA GENERAR LA AGENDA*/

CREATE FUNCTION [3FG].obtenerDia(@FECHA DATETIME)
RETURNS VARCHAR(20)
AS
BEGIN
	DECLARE @DIA TINYINT, @NOMBREDIA VARCHAR(20);
	SET @DIA = DATEPART(WEEKDAY,@FECHA);
	SET @NOMBREDIA = (
	CASE @DIA
	WHEN 1 THEN 'DOMINGO'
	WHEN 2 THEN 'LUNES'
	WHEN 3 THEN 'MARTES'
	WHEN 4 THEN 'MIERCOLES'
	WHEN 5 THEN 'JUEVES'
	WHEN 6 THEN 'VIERNES'
	WHEN 7 THEN 'SABADO'
	END
	)
	RETURN @NOMBREDIA;
END
GO

CREATE FUNCTION [3FG].obtenerHora(@FECHA DATETIME)
RETURNS CHAR(8)
AS
BEGIN
DECLARE @HORA CHAR(8)
SET @HORA = CONVERT(CHAR(8), @FECHA, 108)
	RETURN @HORA;
END
GO

/* -- Migracion-- */

	
CREATE PROCEDURE [3FG].MigrarAfiliadosAUsuarios
AS
BEGIN

	--Se migran los pacientes de la tabla Maestra
	INSERT INTO [3FG].USUARIOS(NOMBRE,APELLIDO,NUMERO_DOCUMENTO,DIRECCION,TELEFONO,MAIL,FECHA_NACIMIENTO)
	SELECT DISTINCT Paciente_Nombre,Paciente_Apellido,Paciente_Dni,Paciente_Direccion,Paciente_Telefono,Paciente_Mail,Paciente_Fecha_Nac 
	FROM gd_esquema.Maestra

END;
GO

/* FALTA VER COMO RELACIONAMOS LOS PACIENTES DE LA TABLA MAESTRA CON SUS FAMILIARES*/
CREATE PROCEDURE [3FG].MigrarAfiliados
AS
BEGIN
	
	alter TABLE [3FG].AFILIADOS 
	NOCHECK CONSTRAINT FK_AFILIADO_PLAN;

	--Se migran los pacientes de la tabla Maestra
	INSERT INTO [3FG].AFILIADOS(ID_USUARIO,ID_PLAN)
	SELECT DISTINCT ID_USUARIO,Plan_Med_Codigo 
	FROM gd_esquema.Maestra M JOIN [3FG].USUARIOS U ON (M.Paciente_Dni = U.NUMERO_DOCUMENTO)

END;
GO

CREATE PROCEDURE [3FG].MigrarProfesionalesAUsuarios
AS
BEGIN

	--Se migran los profesionales de la tabla Maestra
	INSERT INTO [3FG].USUARIOS(NOMBRE,APELLIDO,NUMERO_DOCUMENTO,DIRECCION,TELEFONO,MAIL,FECHA_NACIMIENTO)
	SELECT DISTINCT Medico_Nombre,Medico_Apellido,Medico_Dni,Medico_Direccion,Medico_Telefono,Medico_Mail,Medico_Fecha_Nac 
	FROM gd_esquema.Maestra

END;
GO

/* VER EL TEMA DE LA MATRICULA, SAQUE LA CONSTRAINT UNIQUE PORQUE NO DEJABA MIGRAR */
CREATE PROCEDURE [3FG].MigrarProfesionales
AS
BEGIN

	--Se migran los profesionales de la tabla Maestra
	INSERT INTO [3FG].PROFESIONALES(ID_USUARIO,INICIO_DISPONIBILIDAD,FIN_DISPONIBILIDAD)
	SELECT DISTINCT ID_USUARIO,MIN(Turno_Fecha) INICIO_DISPONIBILIDAD,MAX(Bono_Consulta_Fecha_Impresion) FIN_DISPONIBILIDAD
	FROM gd_esquema.Maestra M JOIN [3FG].USUARIOS U ON (M.Medico_Dni = U.NUMERO_DOCUMENTO)
	WHERE Compra_Bono_Fecha IS NULL
	GROUP BY ID_USUARIO

END;
GO


CREATE PROCEDURE [3FG].MigrarTiposDeEspecialidad
AS
BEGIN

	--Se migran los tipos de especialidad de la tabla Maestra
	INSERT INTO [3FG].TIPO_ESPECIALIDAD(ID_TIPO_ESPECIALIDAD,DESCRIPCION_TIPO_ESPECIALIDAD)
	SELECT DISTINCT Tipo_Especialidad_Codigo,Tipo_Especialidad_Descripcion
	FROM gd_esquema.Maestra
	WHERE Tipo_Especialidad_Codigo is NOT NULL
	ORDER BY 1 asc

END;
GO

CREATE PROCEDURE [3FG].MigrarEspecialidades
AS
BEGIN

	--Se migran las especialidades de la tabla Maestra
	INSERT INTO [3FG].ESPECIALIDADES(ID_ESPECIALIDAD,ID_TIPO_ESPECIALIDAD,DESCRIPCION_ESPECIALIDAD)
	SELECT DISTINCT Especialidad_Codigo,Tipo_Especialidad_Codigo,Tipo_Especialidad_Descripcion
	FROM gd_esquema.Maestra
	WHERE Especialidad_Codigo is NOT NULL
	ORDER BY 1 asc

END;
GO

CREATE PROCEDURE [3FG].MigrarEspecialidadPorProfesional
AS
BEGIN

	--Se migran las especialidades por profesional de la tabla Maestra
	INSERT INTO [3FG].ESPECIALIDAD_PROFESIONAL(ID_USUARIO,ID_ESPECIALIDAD)
	SELECT DISTINCT u.ID_USUARIO,m.Especialidad_Codigo
	FROM gd_esquema.Maestra m, USUARIOS u
	WHERE m.Medico_Dni = u.NUMERO_DOCUMENTO
	
END;
GO

CREATE PROCEDURE [3FG].MigrarAgenda
AS
BEGIN

	alter TABLE [3FG].AGENDA 
	NOCHECK CONSTRAINT FK_AGENDA_ESPECIALIDAD_PROFESIONAL;
	
	--Se genera la agenda a partir de la tabla Maestra
	INSERT INTO [3FG].AGENDA(ID_USUARIO,ID_ESPECIALIDAD,DIA_ATENCION,INICIO_ATENCION,FIN_ATENCION)
	SELECT ID_USUARIO, Especialidad_Codigo,[3FG].obtenerDia(Turno_Fecha) DIA_ATENCION,MIN([3FG].obtenerHora(Turno_Fecha))INICIO_ATENCION,MAX([3FG].obtenerHora(Bono_Consulta_Fecha_Impresion)) FIN_ATENCION
	FROM gd_esquema.Maestra M JOIN [3FG].USUARIOS U ON (M.Medico_Dni = U.NUMERO_DOCUMENTO)
	WHERE Compra_Bono_Fecha IS NULL
	GROUP BY ID_USUARIO,Especialidad_Codigo,[3FG].obtenerDia(Turno_Fecha)
	ORDER BY 1 ASC, 2 ASC

END;
GO

CREATE PROCEDURE [3FG].MigrarPlanes
AS
BEGIN

	--Se migran los planes de la tabla Maestra
	INSERT INTO [3FG].PLANES(DESCRIPCION_PLAN,PRECIO_BONO_CONSULTA,PRECIO_BONO_FARMACIA)
	SELECT DISTINCT Plan_Med_Descripcion,Plan_Med_Precio_Bono_Consulta,Plan_Med_Precio_Bono_Farmacia
	FROM gd_esquema.Maestra
	ORDER BY 1 ASC

END;
GO

/*VER SI ESTO ESTA BIEN*/
CREATE PROCEDURE [3FG].MigrarBonos
AS
BEGIN

	alter TABLE [3FG].BONOS
	NOCHECK CONSTRAINT FK_BONO_AFILIADO;

	--Se migran los bonos de la tabla Maestra
	INSERT INTO [3FG].BONOS(ID_PLAN,ID_USUARIO)
	SELECT Plan_Med_Codigo,ID_USUARIO
	FROM gd_esquema.Maestra m, USUARIOS u
	WHERE m.Paciente_Dni = u.NUMERO_DOCUMENTO
	AND Compra_Bono_Fecha = Bono_Consulta_Fecha_Impresion
	AND Bono_Consulta_Numero is NOT NULL
	ORDER BY Bono_Consulta_Numero ASC

END;
GO

CREATE PROCEDURE [3FG].MigrarCompras
AS
BEGIN

	alter TABLE [3FG].COMPRAS
	NOCHECK CONSTRAINT FK_COMPRA_AFILIADO;

	--Se cargan las compras luego de migrar los bonos
	INSERT INTO [3FG].COMPRAS(ID_USUARIO,FECHA_COMPRA,CANTIDAD_BONOS,MONTO_PAGADO)
	SELECT ID_USUARIO,Compra_Bono_Fecha,COUNT(*) CANTIDAD_BONOS,(COUNT(*)*Plan_Med_Precio_Bono_Consulta) TOTAL_PAGADO
	FROM gd_esquema.Maestra m, [3FG].USUARIOS u
	WHERE m.Paciente_Dni= u.NUMERO_DOCUMENTO
	AND Compra_Bono_Fecha=Bono_Consulta_Fecha_Impresion
	AND Compra_Bono_Fecha is NOT NULL
	GROUP BY ID_USUARIO,Compra_Bono_Fecha,Plan_Med_Precio_Bono_Consulta

END;
GO


/*Tablas temporales para afiliados y medicos*/

CREATE TABLE [3FG].#TMP_AFILIADOS (
	ID_AFILIADO BIGINT,
	NOMBRE VARCHAR(100),
	APELLIDO VARCHAR(100),
	NUMERO_DOCUMENTO BIGINT
)
GO

CREATE TABLE [3FG].#TMP_PROFESIONALES (
	ID_PROFESIONAL BIGINT,
	NOMBRE VARCHAR(100),
	APELLIDO VARCHAR(100),
	NUMERO_DOCUMENTO BIGINT
)
GO


CREATE PROCEDURE [3FG].Migrar_Afiliados_Profesionales_Temporales
AS
BEGIN

	--Se migran los AFILIADOS de la usuarios a la temporal
	INSERT INTO #TMP_AFILIADOS (ID_AFILIADO,NOMBRE,APELLIDO,NUMERO_DOCUMENTO)
	SELECT DISTINCT u.ID_USUARIO, m.Paciente_Nombre, m.Paciente_Apellido, m.Paciente_Dni
	FROM USUARIOS u JOIN gd_esquema.Maestra m ON (u.NUMERO_DOCUMENTO = m.Paciente_Dni)
	
	--Se migran los PROFESIONES de la usuarios a la temporal
	INSERT INTO #TMP_PROFESIONALES (ID_PROFESIONAL,NOMBRE,APELLIDO,NUMERO_DOCUMENTO)
	SELECT DISTINCT u.ID_USUARIO, m.Medico_Nombre, m.Medico_Apellido, m.Medico_Dni
	FROM USUARIOS u JOIN gd_esquema.Maestra m ON (u.NUMERO_DOCUMENTO = m.Medico_Dni) 

END;
GO

/*CREATE PROCEDURE [3FG].MigrarTurnos
AS
BEGIN

	alter TABLE [3FG].TURNOS
	NOCHECK CONSTRAINT FK_TURNO_AFILIADO;

	alter TABLE [3FG].TURNOS
	NOCHECK CONSTRAINT FK_TURNO_AGENDA_PROFESIONAL;


	--Se migran los turnos de la tabla Maestra
	INSERT INTO [3FG].TURNOS(ID_AFILIADO,ID_PROFESIONAL,FECHA_TURNO)
	SELECT DISTINCT a.ID_AFILIADO,p.ID_PROFESIONAL,m.Turno_Fecha
	FROM gd_esquema.Maestra m, #TMP_AFILIADOS a, #TMP_PROFESIONALES p
	WHERE m.Paciente_Dni = a.NUMERO_DOCUMENTO
	AND m.Medico_Dni = p.NUMERO_DOCUMENTO
	AND m.Compra_Bono_Fecha is NULL
	AND m.Bono_Consulta_Fecha_Impresion is NULL
	AND m.Consulta_Sintomas is NULL
	AND m.Consulta_Enfermedades is NULL
	ORDER BY 1 ASC

END;
GO*/

CREATE PROCEDURE [3FG].MigrarRecepciones
AS
BEGIN

	alter TABLE [3FG].RECEPCIONES
	NOCHECK CONSTRAINT FK_RECEPCIONES_BONO;

	alter TABLE [3FG].RECEPCIONES
	NOCHECK CONSTRAINT FK_RECEPCIONES_TURNO;

	--Se cargan las recepciones de la tabla maestra
	INSERT INTO [3FG].RECEPCIONES(ID_TURNO,ID_BONO,FECHA_RECEPCIONES)
	SELECT Turno_Numero,Bono_Consulta_Numero,Bono_Consulta_Fecha_Impresion
	FROM gd_esquema.Maestra
	WHERE Compra_Bono_Fecha is NULL
	AND Bono_Consulta_Fecha_Impresion is NOT NULL

END;
GO

/* -- Inserto los ROLES -- */

INSERT INTO [3FG].ROLES(NOMBRE_ROL) VALUES('Administrativo');
INSERT INTO [3FG].ROLES(NOMBRE_ROL) VALUES('Afiliado');
INSERT INTO [3FG].ROLES(NOMBRE_ROL) VALUES('Profesional');
INSERT INTO [3FG].ROLES(NOMBRE_ROL) VALUES('Administrador general'); /* Es quien va a tener
																	todas las funcionalidades*/

/* Se inserta el usuario admin, password w23e */

INSERT INTO [3FG].USUARIOS(USUARIO_NOMBRE,CONTRASEÑA)
VALUES ('admin',(SELECT SUBSTRING(master.dbo.fn_varbintohexstr(HASHBYTES('SHA2_256','w23e')),3,250) ))
GO

/*HARDCODEO ESTO A MODO DE PRUEBA*/
INSERT INTO [3FG].ROLES_USUARIO(ID_USUARIO,ID_ROL)
VALUES(1,4)

/*INSERT INTO [3FG].FUNCIONALIDADES_ROL(ID_FUNCIONALIDAD,ID_ROL)
VALUES(1,4)*/

-- INICIO DE LA MIGRACION --

/*estos procedures rompian por el unique del USURARIO_NOMBE de la tabla [3FG].USUARIOS*/
EXEC [3FG].MigrarAfiliadosAUsuarios
EXEC [3FG].MigrarAfiliados
EXEC [3FG].MigrarProfesionalesAUsuarios
EXEC [3FG].MigrarProfesionales
EXEC [3FG].MigrarAgenda
EXEC [3FG].MigrarPlanes
EXEC [3FG].MigrarTiposDeEspecialidad
EXEC [3FG].MigrarEspecialidades
EXEC [3FG].MigrarEspecialidadPorProfesional
EXEC [3FG].Migrar_Afiliados_Profesionales_Temporales
--EXEC [3FG].MigrarTurnos
EXEC [3FG].MigrarRecepciones
EXEC [3FG].MigrarBonos
EXEC [3FG].MigrarCompras
GO

-- FIN DE LA MIGRACION--

-- ELIMINO LAS TMP QUE UTILIZAMOS PARA LA MIGRACIÓN--
DROP TABLE dbo.#TMP_AFILIADOS;
GO
DROP TABLE dbo.#TMP_PROFESIONALES;
GO

-- ELIMINO EL TRIGGER UTILIZADO PARA LA MIGRACION
DROP TRIGGER [3FG].CargarAtencionDespuesDeLaRecepcionTrigger
GO

/* PROCEDURES DE LA APLICACION*/

create procedure agregarEntablasUsuarioYAfiliado @usuario varchar(250), @contraseña varchar(250),@id_plan bigint
as
begin 

INSERT INTO [3FG].USUARIOS(USUARIO_NOMBRE,CONTRASEÑA)
VALUES (@usuario,(SELECT SUBSTRING(master.dbo.fn_varbintohexstr(HASHBYTES('SHA2_256',@contraseña)),3,250) ))

 select ID_USUARIO from [3FG].USUARIOS where USUARIO_NOMBRE= @usuario

 insert into [3FG].AFILIADOS(ID_USUARIO,ID_PLAN,ESTADO_CIVIL,CANT_FAMILIARES,RAIZ_AFILIADO,NUMERO_FAMILIA)
 values((select ID_USUARIO from [3FG].USUARIOS where USUARIO_NOMBRE= @usuario),@id_plan,'soltero',2,12313,01)

end
GO

-- CONSULTAS PARA VERIFICAR QUE LA MIGRACION SE REALIZA CORRECTAMENTE
select * from [3FG].ESPECIALIDAD_PROFESIONAL
select * from [3FG].TURNOS
select * from [3FG].PLANES
select * from [3FG].TIPO_ESPECIALIDAD
select * from [3FG].ESPECIALIDADES
select * from [3FG].ROLES
select * from [3FG].USUARIOS
select * from [3FG].RECEPCIONES
select * from [3FG].ATENCIONES_MEDICAS
select * from  [3FG].ROLES
select * from [3FG].ROLES_USUARIO
select * from [3FG].FUNCIONALIDADES
select * from [3FG].AGENDA

